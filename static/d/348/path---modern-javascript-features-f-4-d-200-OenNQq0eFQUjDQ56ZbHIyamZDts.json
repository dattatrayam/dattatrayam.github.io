{"data":{"markdownRemark":{"html":"<p>This post give you quick introduction to ES6 and features of modern JavaScript.</p>\n<p><b>1. Default Parameters</b></p>\n<p>ES5:</p>\n<pre><code class=\"language-js\">    function(firstname, lastname, nationality) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.nationality = nationality === undefined ? \"Indian\" : nationality\n    }\n \n</code></pre>\n<p>ES6:\nwe can put the default values right in the signature of the functions:</p>\n<pre><code class=\"language-js\">    function(firstname, lastname, nationality=\"Indian\") {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.nationality = nationality;\n    }\n \n</code></pre>\n<ol start=\"2\">\n<li>Template Literals</li>\n</ol>\n<pre><code class=\"language-js\">    let firstName = 'Peter';\n    const yearOfBirth = 1980;\n    \n    function calcAge(year) {\n        return 2018 - year;\n    }\n \n</code></pre>\n<p>ES5:\nWe had to break the string like below</p>\n<pre><code class=\"language-js\">    console.log('This is ' + firstName + '. He was born in ' + yearOfBirth + '. Today, he is ' + calcAge(yearOfBirth) + ' years old.');\n \n</code></pre>\n<p>ES6:\nIn ES6 we can use a new syntax ${firstName} inside of the back-ticked string</p>\n<pre><code class=\"language-js\">    console.log(`This is ${firstName} . He was born in ${yearOfBirth}. Today, he is ${calcAge(yearOfBirth)} years old.`);\n \n</code></pre>\n<ol start=\"3\">\n<li>Multi-line Strings </li>\n</ol>\n<p>ES5:\nIn ES5, we had to use like below </p>\n<pre><code class=\"language-js\">    var strData = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry,\\n\\t'\n    + 'Lorem Ipsum has been the industry's standard dummy text ever since the 1500s\\n\\t'\n    + 'when an unknown printer took a galley of type and scrambled it to make a type specimen book,\\n\\t'\n \n</code></pre>\n<p>ES6:\nES6, simply use the backticks:</p>\n<pre><code class=\"language-js\">    var roadPoem = `Lorem Ipsum is simply dummy text of the printing and typesetting industry,\n    Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,\n    when an unknown printer took a galley of type and scrambled it to make a type specimen book`\n \n</code></pre>\n<ol start=\"4\">\n<li>Destructuring Assignment</li>\n</ol>\n<p>ES5:\nIn ES5, we had to use like below </p>\n<pre><code class=\"language-js\">    var employee = ['Peter', 28];\n    var name = employee[0];\n    var age = employee[1];\n \n</code></pre>\n<p>ES6:\nIn ES6, we can replace the ES5 code above with below code:</p>\n<pre><code class=\"language-js\">    \n    let employee = ['Peter', 28];\n    let { name, age } = employee;\n \n</code></pre>\n<ol start=\"5\">\n<li>Arrow Functions</li>\n</ol>\n<p>I love this feature. The flat arrows are amazing ..</p>\n<p>ES5:\nIn ES5, we had to use like below </p>\n<pre><code class=\"language-js\">    const years = [1980, 1985, 1982, 1987];\n    var ages = years.map(function(el) {\n        return 2018 - el;\n    });\n    console.log(ages);\n \n</code></pre>\n<p>ES6:\nIn ES6, we can replace the ES5 code with arrow functions:</p>\n<pre><code class=\"language-js\">    \n    const years = [1980, 1985, 1982, 1987];\n    let ages = years.map(el => 2016 - el);\n    console.log(ages);\n \n</code></pre>","frontmatter":{"title":"Features of modern JavaScript","description":"This post give you quick introduction to ES6 and features of modern JavaScript.","keywords":"ES5| ES6 | JavaScript | ECMAScript2015| Default Parameters | Template Literals | Multi-line Strings | Destructuring | Enhanced Object Literals| Arrow Functions | Promises | Let and Const| Classes | Modules","image":null}},"site":{"siteMetadata":{"siteUrl":"https://dattatrayam.github.io/"}}},"pageContext":{"slug":"/modern-javascript-features/"}}