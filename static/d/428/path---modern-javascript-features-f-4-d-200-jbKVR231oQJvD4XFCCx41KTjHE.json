{"data":{"markdownRemark":{"html":"<p>This post give you quick introduction to ES6 features of modern JavaScript.</p>\n<p><b>1. Default Parameters</b>\nWhen we write any function, we need to account for cases when the arguments will be omitted.\nIn ES5 you would write something like below by using the logical OR (||)</p>\n<pre><code class=\"language-js\">    function(firstname, lastname, nationality) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.nationality = nationality || \"Indian\" ;\n    }\n \n</code></pre>\n<p>In ES6, we can put the default values right in the signature of the functions like so:</p>\n<pre><code class=\"language-js\">    function(firstname, lastname, nationality=\"Indian\") {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.nationality = nationality;\n    }\n \n</code></pre>\n<p><b>2. Template Literals</b>\nTemplate literals are a way to output variables in the string mixed with some text,\nIn ES5, we had to break the string like this.</p>\n<pre><code class=\"language-js\">    let firstName = 'Peter';\n    const yearOfBirth = 1980;\n    \n    function calcAge(year) {\n        return 2018 - year;\n    }\n    \n    console.log('This is ' + firstName + '. He was born in ' + yearOfBirth + '. Today, he is ' + calcAge(yearOfBirth) + ' years old.');\n \n</code></pre>\n<p>In ES6 : we can use a new syntax ${firstName} inside of the back-ticked string</p>\n<pre><code class=\"language-js\">    console.log(`This is ${firstName} . He was born in ${yearOfBirth}. Today, he is ${calcAge(yearOfBirth)} years old.`);\n \n</code></pre>\n<p><b>3. Multi-line Strings</b>\nIn ES5, we had to use concatenation approaches and it was ugly.</p>\n<pre><code class=\"language-js\">    var strData = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry,\\n\\t'\n    + 'Lorem Ipsum has been the industry's standard dummy text ever since the 1500s\\n\\t'\n    + 'when an unknown printer took a galley of type and scrambled it to make a type specimen book,\\n\\t'\n \n</code></pre>\n<p>In ES6 use the backticks:</p>\n<pre><code class=\"language-js\">    var roadPoem = `Lorem Ipsum is simply dummy text of the printing and typesetting industry,\n    Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,\n    when an unknown printer took a galley of type and scrambled it to make a type specimen book`\n \n</code></pre>\n<p><b>4. Destructuring Assignment</b>\nDestructuring is a harder concept and there is some magic behind the scene.\nIn ES5 we had to use like below :</p>\n<pre><code class=\"language-js\">    var employee = ['Peter', 28];\n    var name = employee[0];\n    var age = employee[1];\n \n</code></pre>\n<p>In ES6 we can replace the ES5 code above with below code:</p>\n<pre><code class=\"language-js\">    \n    let employee = ['Peter', 28];\n    let { name, age } = employee;\n \n</code></pre>\n<p><b>5. Arrow Functions</b></p>\n<p>I love this feature. The flat arrows are amazing ..</p>\n<p>ES5:<br/>\nwe had to use like below </p>\n<pre><code class=\"language-js\">    const years = [1980, 1985, 1982, 1987];\n    var ages = years.map(function(el) {\n        return 2018 - el;\n    });\n    console.log(ages);\n \n</code></pre>\n<p>ES6:<br/>\nwe can replace the ES5 code with arrow functions:</p>\n<pre><code class=\"language-js\">    \n    const years = [1980, 1985, 1982, 1987];\n    let ages = years.map(el => 2016 - el);\n    console.log(ages);\n \n</code></pre>","frontmatter":{"title":"Features of modern JavaScript","description":"This post give you quick introduction to ES6 features of modern JavaScript.","keywords":"ES5| ES6 | JavaScript | ECMAScript2015| Default Parameters | Template Literals | Multi-line Strings | Destructuring | Enhanced Object Literals| Arrow Functions | Promises | Let and Const| Classes | Modules","image":null}},"site":{"siteMetadata":{"siteUrl":"https://dattatrayam.github.io/"}}},"pageContext":{"slug":"/modern-javascript-features/"}}